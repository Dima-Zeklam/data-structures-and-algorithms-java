/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    //Node can be successfully added to the graph
    @Test void TestAddNodeToGraph() {
        Graph<String> graph = new Graph();
        assertEquals("A", graph.addNode("A").toString());
    }


    //A collection of all nodes can be properly retrieved from the graph
    @Test void TestGetNodesFromGraph() {
       Graph<String> graph = new Graph();
       graph.addNode("A");
       graph.addNode("B");
       graph.addNode("C");
       assertEquals("[A, B, C]", graph.getNodes().toString());
    }
    //An edge can be successfully added to the graph
    //All appropriate neighbors can be retrieved from the graph
    // Neighbors are returned with the weight between nodes included
    @Test void TestGetNeighborsInGraph() {
        Graph<String> graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addEdge("A", "B",1);
        graph.addEdge("A", "C",3);
        graph.addEdge("c", "B",2);
        assertEquals("[ ( B , 1 ) ,  ( C , 3 ) ]", graph.getNeighbors("A").toString());
    }


    //The proper size is returned, representing the number of nodes in the graph
    @Test void TestSizeInGraph() {
        Graph<String> graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");

        assertEquals(3, graph.size());
    }
    //A graph with only one node and edge can be properly returned
    @Test void TestOneNodeInGraph() {
        Graph<String> graph = new Graph();
       String node =  graph.addNode("A").toString();
        graph.addEdge("A", "B",1);
        assertEquals("A",node);
        assertEquals(1, graph.size());
    }
    //An empty graph properly returns null
    @Test void TestEmptyGraph() {
        Graph<String> graph = new Graph();

        assertEquals(null, graph.toString());
    }
    @Test void TestBreadthFirst() {
        Graph<String> graph1 = new Graph();
        graph1.addNode("Pandora");
        graph1.addNode("Arendelle");
        graph1.addNode("Metroville");
        graph1.addNode("Monstroplolis");
        graph1.addNode("Narnia");
        graph1.addNode("Naboo");

        graph1.addEdge("Pandora", "Arendelle",0);
        graph1.addEdge("Arendelle", "Metroville",0);
        graph1.addEdge("Arendelle", "Monstroplolis",0);
        graph1.addEdge("Metroville", "Monstroplolis",0);
        graph1.addEdge("Metroville", "Narnia",0);
        graph1.addEdge("Metroville", "Naboo",0);
        graph1.addEdge("Monstroplolis", "Naboo",0);
        graph1.addEdge("Naboo", "Narnia",0);

        assertEquals("[Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo]",
                graph1.BreadthFirst("Pandora").toString());
    }
    @Test void TestBreadthFirstOnEmptyGraph() {
        Graph<String> graph = new Graph();

        assertEquals(null,graph.BreadthFirst(null));
    }

    @Test void TestbusinessTrip() {
        Graph<String> graph1 = new Graph();
        graph1.addNode("Pandora");
        graph1.addNode("Arendelle");
        graph1.addNode("Metroville");
        graph1.addNode("Monstroplolis");
        graph1.addNode("Narnia");
        graph1.addNode("Naboo");

        graph1.addEdge("Pandora", "Arendelle",150);
        graph1.addEdge("Metroville", "Pandora",82);
        graph1.addEdge("Metroville", "Arendelle",99);
        graph1.addEdge("Arendelle", "Monstroplolis",42);
        graph1.addEdge("Monstroplolis", "Naboo",73);
        graph1.addEdge("Metroville", "Monstroplolis",105);
        graph1.addEdge("Metroville", "Narnia",37);
        graph1.addEdge("Metroville", "Naboo",26);
        graph1.addEdge("Naboo", "Narnia",250);
        ArrayList<String > cityNames = new ArrayList<>();
        cityNames.add("Arendelle");
        cityNames.add("Monstroplolis");
        cityNames.add("Naboo");
        assertEquals("True, $115",graph1.businessTrip(graph1,cityNames));
    }
    @Test void TestbusinessTripOnEmptyArray() {
        Graph<String> graph = new Graph();
        graph.addNode("Pandora");
        graph.addNode("Arendelle");
        graph.addNode("Metroville");
        graph.addNode("Monstroplolis");
        graph.addNode("Narnia");
        graph.addNode("Naboo");
        ArrayList<String > cityNames = new ArrayList<>();
        assertEquals("null",graph.businessTrip(graph,cityNames));
    }


}
