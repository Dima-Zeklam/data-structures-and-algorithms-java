/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import org.junit.jupiter.api.Test;
import trees.KaryTree.KaryTree;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

        //    Can successfully instantiate an empty tree
    @Test void InstantiateEmptyTree() {
        BinarySearchTree<Integer>tree = new BinarySearchTree<>();
        String Expected = "BinarySearchTree{root=null}";
        assertEquals(Expected,tree.toString());

    }
    //    Can successfully instantiate a tree with a single root node
    @Test void TreeWithSingleRootNode() {
        BinarySearchTree<Integer>tree = new BinarySearchTree<>();
        tree.add(10);
        String Expected ="BinarySearchTree{root=Node{data=10, left=null, right=null}}";
        assertEquals(Expected,tree.toString());

    }
    //    Can successfully add a left child and right child to a single root node
    @Test void TreeWithLeftRightChild() {
        BinarySearchTree<Integer>tree = new BinarySearchTree<>();
        tree.add(10);
        tree.add(5);
        tree.add(15);
        tree.add(3);
        tree.add(7);
        tree.add(22);
        String Expected ="BinarySearchTree{root=Node{data=10, left=Node{data=5, left=Node{data=3, " +
                "left=null, right=null}, right=Node{data=7, left=null, right=null}}," +
                " right=Node{data=15, left=null, right=Node{data=22, left=null, right=null}}}}";
        assertEquals(Expected,tree.toString());
    }
    //    Can successfully return a collection from a preorder traversal
    @Test void TreeWithPreorderTraversal() {
        BinarySearchTree<Integer>tree = new BinarySearchTree<>();
        tree.add(10);
        tree.add(5);
        tree.add(15);
        tree.add(3);
        tree.add(7);
        tree.add(22);
      String Expected = "[10, 5, 3, 7, 15, 22]";
        assertEquals(Expected,tree.preOrder(tree.root).toString());
    }
    //    Can successfully return a collection from an inorder traversal

    @Test void TreeWithInorderTraversal() {
        BinarySearchTree<Integer>tree = new BinarySearchTree<>();
        tree.add(10);
        tree.add(5);
        tree.add(15);
        tree.add(3);
        tree.add(7);
        tree.add(22);
        String Expected = "[3, 5, 7, 10, 15, 22]";
        assertEquals(Expected,tree.inOrder(tree.root).toString());
    }
    //    Can successfully return a collection from a postorder traversal
    @Test void TreeWithPostorderTraversal() {
        BinarySearchTree<Integer>tree = new BinarySearchTree<>();
        tree.add(10);
        tree.add(5);
        tree.add(15);
        tree.add(3);
        tree.add(7);
        tree.add(22);
        String Expected = "[3, 7, 5, 22, 15, 10]";
        assertEquals(Expected,tree.postOrder(tree.root).toString());
    }
    @Test void EmptyTreeMaxTest() {
        BinarySearchTree<Integer>tree = new BinarySearchTree<>();
        int Expected = 0;
        assertEquals(Expected,tree.treeMax());
    }
    @Test void TreeMaxTest() {
        BinarySearchTree<Integer>tree = new BinarySearchTree<>();
        tree.add(10);
        tree.add(5);
        tree.add(15);
        tree.add(30);
        tree.add(7);
        tree.add(22);
        int Expected =30;
        assertEquals(Expected,tree.treeMax());
    }
    @Test void BreadthFirst() {
        BinarySearchTree<Integer>tree = new BinarySearchTree<>();
        tree.add(10);
        tree.add(5);
        tree.add(15);
        tree.add(30);
        tree.add(7);
        tree.add(22);
        String Expected ="[10, 5, 15, 7, 30, 22]";
        assertEquals(Expected,tree.breadthFirst(tree).toString());
    }
    @Test void FuzzBuzzTreeTest() {
                KaryTree<Integer> karyTree = new KaryTree<Integer>(3);
                karyTree.add(9);
                karyTree.add(30);
                karyTree.add(3);
                karyTree.add(5);
                karyTree.add(15);
                karyTree.add(6);
                karyTree.add(2);
                //[ 9, 30, 15, 6, 2, 3, 5]
        String Expected ="[ Fizz, FizzBuzz, FizzBuzz, Fizz, 2, Fizz, Buzz]";
        assertEquals(Expected,karyTree.fizzBuzzTree(karyTree).toString());
    }
    @Test void FuzzBuzzEmptyTreeTest() {
        KaryTree<Integer> karyTree = new KaryTree<Integer>(3);
        String Expected ="[null]";
        assertEquals(Expected,karyTree.fizzBuzzTree(karyTree).toString());
    }

}
