/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.queue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    App classUnderTest = new App();
    //Can successfully push onto a stack
    @Test void TestPushOntoStack() {

        Stack<Integer> stack = new Stack<Integer>();
        stack.push(8);
        String test = "8";
        assertEquals(test,stack.peek());
    }

    //Can successfully push multiple values onto a stack
    @Test void TestPushMultipleValOntoStack() {

        Stack<Integer> stack = new Stack<Integer>();
        stack.push(8);
        stack.push(5);
        stack.push(97);
        String test = "Stack{top=97}";
        assertEquals(test,stack.toString());
    }
    //Can successfully pop off the stack
    @Test void TesPopFromStack() {

        Stack<Integer> stack = new Stack<Integer>();
        stack.push(8);
        stack.push(5);
        stack.push(97);
        stack.pop();
        String test = "Stack{top=5}";
        assertEquals(test,stack.toString());
    }
    //Can successfully empty a stack after multiple pops
    @Test void TestPopMultipleValFromStack() {

        Stack<Integer> stack = new Stack<Integer>();
        stack.push(8);
        stack.push(5);
        stack.push(97);
        stack.pop();
        stack.pop();
        String test = "Stack{top=8}";
        assertEquals(test,stack.toString());
    }
    //Can successfully peek the next item on the stack
    @Test void TestPeekFromStack() {

        Stack<Integer> stack = new Stack<Integer>();
        stack.push(8);
        stack.push(5);
        stack.push(97);
        String test = "97";
        assertEquals(test,stack.peek());
    }
    //Can successfully instantiate an empty stack
    @Test void TestInstantiateEmptyStack() {

        Stack<Integer> stack = new Stack<Integer>();
        boolean test = true;
        assertEquals(test,stack.isEmpty());
    }
    //Calling pop or peek on empty stack raises exception
    @Test void TestCallPopOnEmptyStack() {

        Stack<Integer> stack = new Stack<Integer>();
        String Exception = "the stack is empty";
        assertEquals(Exception,stack.pop());
    }
    @Test void TestCallPeekOnEmptyStack() {

        Stack<Integer> stack = new Stack<Integer>();
        String Exception = "the stack is empty";
        assertEquals(Exception,stack.peek());
    }
    //Can successfully enqueue into a queue
    @Test void TestEnqueueOntoQueue() {

        Queue<Integer> queue = new Queue<Integer>();
        queue.enqueue(8);
        String test = "Queue{front=8, rear=8}";
        assertEquals(test,queue.toString());
    }
    //Can successfully enqueue multiple values into a queue
    @Test void TestEnqueueMultipleValOntoQueue() {

        Queue<Integer> queue = new Queue<Integer>();
        queue.enqueue(3);
        queue.enqueue(8);
        queue.enqueue(2);
        String test = "Queue{front=3, rear=2}";
        assertEquals(test,queue.toString());
    }
    //Can successfully dequeue out of a queue the expected value
    @Test void TestDequeueFromQueue() {

        Queue<Integer> queue = new Queue<Integer>();
        queue.enqueue(12);
        queue.enqueue(8);
        queue.enqueue(2);
        queue.dequeue();
        String test = "Queue{front=8, rear=2}";
        assertEquals(test,queue.toString());
    }
    //Can successfully peek into a queue, seeing the expected value
    @Test void TestPeekFromEmptyQueue() {

        Queue<Integer> queue = new Queue<Integer>();

        String Exception = "the Queue is empty";
        assertEquals(Exception,queue.peek());
    }
    //Calling dequeue or peek on empty queue raises exception
    @Test void TestDequeueFromEmptyQueue() {

        Queue<Integer> queue = new Queue<Integer>();
        String Exception = "the Queue is empty";
        assertEquals(Exception,queue.dequeue());
    }
    //Can successfully empty a queue after multiple dequeues
    @Test void TestDequeueToGetEmptyQueue() {

        Queue<Integer> queue = new Queue<Integer>();
        queue.enqueue(12);
        queue.enqueue(8);
        queue.enqueue(2);
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        String Exception = "the Queue is empty";
        assertEquals(Exception,queue.peek());
    }
    //Can successfully instantiate an empty queue
    @Test void TestInstantiateEmptyQueue() {

        Queue<Integer> queue = new Queue<Integer>();
        boolean test = true;
        assertEquals(test,queue.isEmpty());
    }
    @Test void TestPseudoQueueEnqueue() {

        PseudoQueue<Integer> pseudoQueue = new PseudoQueue<>();
        pseudoQueue.PseudoEnqueue(5);// first in first out, will be the front
        pseudoQueue.PseudoEnqueue(10);
        pseudoQueue.PseudoEnqueue(20);// will be the rear
      String test = "PseudoQueue{stack2=Stack{top=5}}";
        assertEquals(test,pseudoQueue.toString());
    }
    @Test void TestPseudoQueueDequeue() {

        PseudoQueue<Integer> pseudoQueue = new PseudoQueue<>();
        pseudoQueue.PseudoEnqueue(5);// first in first out, will be the front
        pseudoQueue.PseudoEnqueue(10);
        pseudoQueue.PseudoEnqueue(20);// will be the rear
        System.out.println(pseudoQueue.PseudoDequeue());// will delete front which is 5
        String test = "PseudoQueue{stack2=Stack{top=10}}";
        assertEquals(test,pseudoQueue.toString());
    }
    @Test void TestPseudoQueueDequeueFromEmptyStack() {

        PseudoQueue<Integer> pseudoQueue = new PseudoQueue<>();
        String test = "the stack is empty";
        assertEquals(test,pseudoQueue.PseudoDequeue());
    }

    @Test void TestAnimalShelterDequeueFromEmptyQueue() {
        AnimalShellter animalShellter = new AnimalShellter();
           String test = "queue is empty";
        String test2 = "queue is empty";
        assertEquals(test,animalShellter.dequeueAnimal("cat"));
        assertEquals(test2,animalShellter.dequeueAnimal("dog"));
    }
    @Test void TestAnimalShelterDequeueForHours() {
        AnimalShellter animalShellter = new AnimalShellter();
        String test = null;
        assertEquals(test,animalShellter.dequeueAnimal("hours"));
    }
    @Test void TestAnimalShelterEnqueue() {
                AnimalShellter animalShellter = new AnimalShellter();
    Animal cat1 = new Cat("kitty");
    Animal cat2 = new Cat("jeje");
    Animal cat3 = new Cat("katy");
    Animal dog1 = new Dog("jak");
    Animal dog2 = new Dog("husky");
    Animal dog3 = new Dog("polty");
        System.out.println(animalShellter.dequeueAnimal("cat"));
        animalShellter.enqueueAnimal(cat1);
        animalShellter.enqueueAnimal(cat2);
        animalShellter.enqueueAnimal(dog1);
        animalShellter.enqueueAnimal(dog2);
        animalShellter.enqueueAnimal(cat3);
        animalShellter.enqueueAnimal(dog3);
        String test = "AnimalShellter{animals=Queue{front=kitty, rear=polty}}";
        assertEquals(test,animalShellter.toString());
    }
    @Test void TestAnimalShelterDequeue() {
        AnimalShellter animalShellter = new AnimalShellter();
        Animal cat1 = new Cat("kitty");
        Animal cat2 = new Cat("jeje");
        Animal cat3 = new Cat("katy");
        Animal dog1 = new Dog("jak");
        Animal dog2 = new Dog("husky");
        Animal dog3 = new Dog("polty");
        System.out.println(animalShellter.dequeueAnimal("cat"));
        animalShellter.enqueueAnimal(cat1);
        animalShellter.enqueueAnimal(cat2);
        animalShellter.enqueueAnimal(dog1);
        animalShellter.enqueueAnimal(dog2);
        animalShellter.enqueueAnimal(cat3);
        animalShellter.enqueueAnimal(dog3);
        String test = "kitty";
        assertEquals(test,animalShellter.dequeueAnimal("cat"));

    }
    @Test void TestBrackets() {
        ValidateBrackets bracket = new ValidateBrackets();

        boolean testF = false;
        boolean testT = true;
        assertEquals(testT,bracket.validateBrackets("{}"));
        assertEquals(testT,bracket.validateBrackets("{}(){}"));
        assertEquals(testT,bracket.validateBrackets("()[[Extra Characters]]"));
        assertEquals(testT,bracket.validateBrackets("{}{Code}[Fellows](())"));
        assertEquals(testF,bracket.validateBrackets("[({}]"));
        assertEquals(testF,bracket.validateBrackets("{(})"));
        assertEquals(testF,bracket.validateBrackets("(]("));
        assertEquals(testF,bracket.validateBrackets("(]"));
        assertEquals(testF,bracket.validateBrackets("}"));
        assertEquals(testF,bracket.validateBrackets("]"));
        assertEquals(testF,bracket.validateBrackets(")"));


    }
    @Test void TestBracketsEmptyString() {
        ValidateBrackets bracket = new ValidateBrackets();
        boolean testF = false;
        boolean testT = true;
        assertEquals(testF,bracket.validateBrackets(" "));
           }


}
