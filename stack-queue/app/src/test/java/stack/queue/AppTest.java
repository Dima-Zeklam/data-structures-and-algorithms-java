/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.queue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    App classUnderTest = new App();
    //Can successfully push onto a stack
    @Test void TestPushOntoStack() {

        Stack<Integer> stack = new Stack<>();
        stack.push(8);
        String test = "8";
        assertEquals(test,stack.peek());
    }

    //Can successfully push multiple values onto a stack
    @Test void TestPushMultipleValOntoStack() {

        Stack<Integer> stack = new Stack<>();
        stack.push(8);
        stack.push(5);
        stack.push(97);
        String test = "Stack{top=97}";
        assertEquals(test,stack.toString());
    }
    //Can successfully pop off the stack
    @Test void TesPopFromStack() {

        Stack<Integer> stack = new Stack<>();
        stack.push(8);
        stack.push(5);
        stack.push(97);
        stack.pop();
        String test = "Stack{top=5}";
        assertEquals(test,stack.toString());
    }
    //Can successfully empty a stack after multiple pops
    @Test void TestPopMultipleValFromStack() {

        Stack<Integer> stack = new Stack<>();
        stack.push(8);
        stack.push(5);
        stack.push(97);
        stack.pop();
        stack.pop();
        String test = "Stack{top=8}";
        assertEquals(test,stack.toString());
    }
    //Can successfully peek the next item on the stack
    @Test void TestPeekFromStack() {

        Stack<Integer> stack = new Stack<>();
        stack.push(8);
        stack.push(5);
        stack.push(97);
        String test = "97";
        assertEquals(test,stack.peek());
    }
    //Can successfully instantiate an empty stack
    @Test void TestInstantiateEmptyStack() {

        Stack<Integer> stack = new Stack<>();
        boolean test = true;
        assertEquals(test,stack.isEmpty());
    }
    //Calling pop or peek on empty stack raises exception
    @Test void TestCallPopOnEmptyStack() {

        Stack<Integer> stack = new Stack<>();
        String Exception = "the stack is empty";
        assertEquals(Exception,stack.pop());
    }
    @Test void TestCallPeekOnEmptyStack() {

        Stack<Integer> stack = new Stack<>();
        String Exception = "the stack is empty";
        assertEquals(Exception,stack.peek());
    }
    //Can successfully enqueue into a queue
    @Test void TestEnqueueOntoQueue() {

        Queue<Integer> queue = new Queue<>();
        queue.enqueue(8);
        String test = "Queue{front=8, rear=8}";
        assertEquals(test,queue.toString());
    }
    //Can successfully enqueue multiple values into a queue
    @Test void TestEnqueueMultipleValOntoQueue() {

        Queue<Integer> queue = new Queue<>();
        queue.enqueue(3);
        queue.enqueue(8);
        queue.enqueue(2);
        String test = "Queue{front=3, rear=2}";
        assertEquals(test,queue.toString());
    }
    //Can successfully dequeue out of a queue the expected value
    @Test void TestDequeueFromQueue() {

        Queue<Integer> queue = new Queue<>();
        queue.enqueue(12);
        queue.enqueue(8);
        queue.enqueue(2);
        queue.dequeue();
        String test = "Queue{front=8, rear=2}";
        assertEquals(test,queue.toString());
    }
    //Can successfully peek into a queue, seeing the expected value
    @Test void TestPeekFromEmptyQueue() {

        Queue<Integer> queue = new Queue<>();

        String Exception = "the Queue is empty";
        assertEquals(Exception,queue.peek());
    }
    //Calling dequeue or peek on empty queue raises exception
    @Test void TestDequeueFromEmptyQueue() {

        Queue<Integer> queue = new Queue<>();
        String Exception = "the Queue is empty";
        assertEquals(Exception,queue.dequeue());
    }
    //Can successfully empty a queue after multiple dequeues
    @Test void TestDequeueToGetEmptyQueue() {

        Queue<Integer> queue = new Queue<>();
        queue.enqueue(12);
        queue.enqueue(8);
        queue.enqueue(2);
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        String Exception = "the Queue is empty";
        assertEquals(Exception,queue.peek());
    }
    //Can successfully instantiate an empty queue
    @Test void TestInstantiateEmptyQueue() {

        Queue<Integer> queue = new Queue<>();
        boolean test = true;
        assertEquals(test,queue.isEmpty());
    }


}
